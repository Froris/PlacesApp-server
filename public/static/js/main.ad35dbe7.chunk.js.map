{"version":3,"sources":["components/shared/context/auth-context.js","components/shared/components/FormElements/Button.js","components/shared/components/UIElements/LoadingSpinner.js","components/shared/components/UIElements/Backdrop.js","components/shared/hooks/auth-hook.js","components/shared/components/Navigation/MainHeadre.js","components/shared/components/Navigation/NavLinks.js","components/shared/components/Navigation/SideDrawer.js","components/shared/components/Navigation/MainNavigation.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","token","userId","login","logout","Button","props","href","className","size","inverse","danger","children","to","exact","type","onClick","disabled","LoadingSpinner","asOverlay","Backdrop","ReactDOM","createPortal","document","getElementById","logoutTimer","MainHeader","NavLinks","auth","useContext","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setIsOpen","toggleDrawerHandler","useAuth","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","updatedTokenExpirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","path","Provider","value","fallback","render"],"mappings":"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","file":"static/js/main.ad35dbe7.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext({\r\n  isLoggedIn: false,\r\n  token: null,\r\n  userId: null,\r\n  login() {},\r\n  logout() {},\r\n});\r\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React, { useEffect, useState, useCallback } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nconst useAuth = () => {\r\n  const [token, setToken] = useState(false);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\r\n  const [userId, setUserId] = useState(false);\r\n\r\n  const login = useCallback((uid, token, expirationDate) => {\r\n    setToken(token);\r\n    setUserId(uid);\r\n    const updatedTokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n    setTokenExpirationDate(updatedTokenExpirationDate);\r\n    localStorage.setItem(\r\n      \"userData\",\r\n      JSON.stringify({\r\n        userId: uid,\r\n        token: token,\r\n        expiration: updatedTokenExpirationDate.toISOString(),\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null);\r\n    setTokenExpirationDate(null);\r\n    setUserId(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\r\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\r\n    }\r\n  }, [login]);\r\n\r\n  return { token, login, logout, userId };\r\n};\r\n\r\nexport default useAuth;\r\n","import React from \"react\";\r\nimport \"./MainHeader.css\";\r\n\r\nconst MainHeader = (props) => {\r\n  return <header className=\"main-header\">{props.children}</header>;\r\n};\r\n\r\nexport default MainHeader;\r\n","import React, { useContext } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavLinks.css\";\r\nimport { AuthContext } from \"../../context/auth-context\";\r\nimport Button from \"../FormElements/Button\";\r\n\r\nconst NavLinks = (props) => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  return (\r\n    <ul className=\"nav-links\">\r\n      <li>\r\n        <NavLink to=\"/\" exact>\r\n          ALL USERS\r\n        </NavLink>\r\n      </li>\r\n      {auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink>\r\n        </li>\r\n      )}\r\n      {auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/places/new\">ADD PLACES</NavLink>\r\n        </li>\r\n      )}\r\n      {!auth.isLoggedIn && (\r\n        <li>\r\n          <NavLink to=\"/auth\">AUTHENTICATION</NavLink>\r\n        </li>\r\n      )}\r\n      {auth.isLoggedIn && <Button onClick={auth.logout}>LOGOUT</Button>}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NavLinks;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./SideDrawer.css\";\r\n\r\nconst SideDrawer = (props) => {\r\n  const content = (\r\n    <CSSTransition in={props.show} timeout={200} classNames=\"slide-in-left\" mountOnEnter unmountOnExit>\r\n      <aside className=\"side-drawer\" onClick={props.onClick}>\r\n        {props.children}\r\n      </aside>\r\n    </CSSTransition>\r\n  );\r\n  return ReactDOM.createPortal(content, document.getElementById(\"drawer-hook\"));\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport MainHeader from \"./MainHeadre\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./MainNavigation.css\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport SideDrawer from \"./SideDrawer\";\r\nimport Backdrop from \"../UIElements/Backdrop\";\r\n\r\nconst MainNavigation = (props) => {\r\n  const [drawerIsOpen, setIsOpen] = useState(false);\r\n  const toggleDrawerHandler = () => {\r\n    setIsOpen(!drawerIsOpen);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {drawerIsOpen && <Backdrop onClick={toggleDrawerHandler} />}\r\n\r\n      <SideDrawer show={drawerIsOpen} onClick={toggleDrawerHandler}>\r\n        <nav className=\"main-navigation__drawer-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </SideDrawer>\r\n\r\n      <MainHeader>\r\n        <button className=\"main-navigation__menu-btn\" onClick={toggleDrawerHandler}>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </button>\r\n        <h1 className=\"main-navigation__title\">\r\n          <Link to=\"/\">Your places</Link>\r\n        </h1>\r\n        <nav className=\"main-navigation__header-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </MainHeader>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default MainNavigation;\r\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\n\nimport \"./index.css\";\n\n// import Users from \"./components/user/pages/Users\";\n// import NewPlace from \"./components/places/pages/NewPlace\";\n// import UserPlaces from \"./components/places/pages/UserPlaces\";\n// import UpdatePlace from \"./components/places/pages/UpdatePlace\";\n// import Auth from \"./components/user/pages/AuthPage\";\n\nimport MainNavigation from \"./components/shared/components/Navigation/MainNavigation\";\nimport { AuthContext } from \"./components/shared/context/auth-context\";\nimport useAuth from \"./components/shared/hooks/auth-hook\";\nimport LoadingSpinner from \"./components/shared/components/UIElements/LoadingSpinner\";\n\nconst Users = React.lazy(() => import(\"./components/user/pages/Users\"));\nconst NewPlace = React.lazy(() => import(\"./components/places/pages/NewPlace\"));\nconst UserPlaces = React.lazy(() => import(\"./components/places/pages/UserPlaces\"));\nconst UpdatePlace = React.lazy(() => import(\"./components/places/pages/UpdatePlace\"));\nconst Auth = React.lazy(() => import(\"./components/user/pages/AuthPage\"));\n\nconst App = () => {\n  const { token, login, logout, userId } = useAuth();\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        userId: userId,\n        login: login,\n        logout: logout,\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <Suspense\n          fallback={\n            <div className=\"center\">\n              <LoadingSpinner />\n            </div>\n          }\n        >\n          <main>{routes}</main>\n        </Suspense>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}