{"version":3,"sources":["components/shared/components/UIElements/Card.js","components/shared/components/UIElements/Map.js","components/places/components/PlaceItem.js","components/places/components/PlaceList.js","components/places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","id","image","title","address","description","creator","coordinates","onDelete","useHttpClient","isLoading","errorMessage","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","toggleMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","Authorization","token","ErrorModal","error","onClear","Modal","show","toggleModal","header","contentClass","footerClass","footer","Button","onClick","onCancel","Fragment","inverse","danger","LoadingSpinner","asOverlay","src","alt","userId","to","PlaceList","items","length","place","key","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.4ba97c2a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\n\nimport './Map.css';\n\nconst Map = props => {\n  const mapRef = useRef();\n  \n  const { center, zoom } = props;\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom\n    });\n  \n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);  \n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { useState, Fragment, useRef, useContext, useEffect } from \"react\";\r\nimport \"./PlaceItem.css\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Map from \"../../shared/components/UIElements/Map\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nconst PlaceItem = ({ id, image, title, address, description, creator, coordinates, onDelete }) => {\r\n  const { isLoading, errorMessage, sendRequest, clearError } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  const toggleMapHandler = () => {\r\n    setShowMap(!showMap);\r\n  };\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true);\r\n  };\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/api/places/${id}`, \"DELETE\", null, {\r\n        Authorization: \"Bearer \" + auth.token,\r\n      });\r\n    } catch (error) {}\r\n    onDelete(id);\r\n  };\r\n\r\n  // 1. Modal map window\r\n  // 2. Modal delete window\r\n  // 3. Place list item\r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={errorMessage} onClear={clearError} />\r\n      <Modal\r\n        show={showMap}\r\n        toggleModal={toggleMapHandler}\r\n        header={address}\r\n        contentClass=\"place-item__modal-content\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={<Button onClick={toggleMapHandler}>CLOSE</Button>}\r\n      >\r\n        <div className=\"map-container\">\r\n          <Map center={coordinates} zoom={16} />\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Are you sure?\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={cancelDeleteHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandler}>\r\n              DELETE\r\n            </Button>\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <p>Do you want to proceed and delete this place?</p>\r\n      </Modal>\r\n\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n          {isLoading && <LoadingSpinner asOverlay />}\r\n          <div className=\"place-item__image\">\r\n            <img src={`${process.env.REACT_APP_BACKEND_URL}/${image}`} alt={title} />\r\n          </div>\r\n          <div className=\"place-item__info\">\r\n            <h2>{title}</h2>\r\n            <h3>{address}</h3>\r\n            <p>{description}</p>\r\n          </div>\r\n          <div className=\"place-item__actions\">\r\n            <Button inverse onClick={toggleMapHandler}>\r\n              VIEW ON MAP\r\n            </Button>\r\n            {auth.userId === creator && <Button to={`/places/${id}`}>EDIT</Button>}\r\n            {auth.userId === creator && (\r\n              <Button danger onClick={showDeleteWarningHandler}>\r\n                DELETE\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PlaceItem;\r\n","import React from \"react\";\r\n\r\nimport \"./PlaceList.css\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport PlaceItem from \"../components/PlaceItem\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\n\r\nconst PlaceList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No places found. Maybe create one&</h2>\r\n          <Button to=\"/places/new\">Share Place</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ul className=\"place-list\">\r\n      {props.items.map((place) => {\r\n        return <PlaceItem key={place.id} coordinates={place.location} onDelete={props.onDeletePlace} {...place} />;\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PlaceList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PlaceList from \"../components/PlaceList\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst UserPlaces = () => {\r\n  const { isLoading, errorMessage, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/api/places/user/${userId}`);\r\n        setLoadedPlaces(responseData.places);\r\n      } catch (err) {}\r\n    };\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  const placeDeleteHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces((prevPlaces) => prevPlaces.filter((place) => place.id !== deletedPlaceId));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={errorMessage} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeleteHandler} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserPlaces;\r\n"],"sourceRoot":""}